package {{package}};

import {{modelPackage}}.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import javax.validation.Valid;
import javax.validation.constraints.*;

{{#imports}}import {{import}};
{{/imports}}

import java.util.List;

import java.io.InputStream;
import javax.ws.rs.core.Response;
{{#generateSecurityContext}}
import javax.ws.rs.core.Context;
import javax.ws.rs.core.SecurityContext;
{{/generateSecurityContext}}
import javax.ws.rs.*;

@Path("{{version}}/{{baseName}}")
{{#hasConsumes}}@Consumes({ {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
{{#hasProduces}}@Produces({ {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
@Api(description = "the {{baseName}} API")
{{>generatedAnnotation}}
{{#operations}}
public interface {{classname}}  {

{{#operation}}
    @{{httpMethod}}
    {{#subresourceOperation}}@Path("{{path}}"){{/subresourceOperation}}
    {{#hasConsumes}}@Consumes({ {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
    {{#hasProduces}}@Produces({ {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
    @ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}"{{#returnContainer}}, response = {{{returnContainer}}}.class, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}{{#hasAuthMethods}}, authorizations = {
    {{#authMethods}}@Authorization(value = "{{name}}"{{#isOAuth}}, scopes = {
    {{#scopes}}@AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{#hasMore}},
    {{/hasMore}}{{/scopes}}
    }{{/isOAuth}}){{#hasMore}},
    {{/hasMore}}{{/authMethods}}
    }{{/hasAuthMethods}}, tags={
      {{#vendorExtensions.x-tags}}"{{tag}}",{{/vendorExtensions.x-tags}} {{#vendorExtensions.x-features}}"{{.}}",{{/vendorExtensions.x-features}}
    })
    @ApiResponses(value = { {{#responses}}
        @ApiResponse(code = {{{code}}}, message = "{{{message}}}"{{#baseType}}, response = {{{baseType}}}.class{{/baseType}}{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}){{#hasMore}},
        {{/hasMore}}{{/responses}} })
    public Response {{nickname}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},{{/hasMore}}{{^hasMore}}{{#generateSecurityContext}},{{/generateSecurityContext}}{{/hasMore}}{{/allParams}}{{#generateSecurityContext}}@Context SecurityContext securityContext{{/generateSecurityContext}});
{{/operation}}
}
{{/operations}}
